common:
  image:
    repository: quay.io/pires/docker-elasticsearch-kubernetes
    tag: 5.5.0
    pullPolicy: Always
    clusterName: mmes
    plugins: analysis-icu

persistence:
  enabled: false

# Client/ingest nodes can execute pre-processing pipelines, composed of
# one or more ingest processors. Depending on the type of operations
# performed by the ingest processors and the required resources, it may make
# sense to have dedicated ingest nodes, that will only perform this specific task.
client:
  # It isn't common to need more than 2 client nodes.
  replicas: 2
  env:
    NODE_DATA: "false"
    NODE_MASTER: "false"
    NODE_INGEST: "true"
    HTTP_ENABLE: "true"
    ES_JAVA_OPTS: "-Xms256m -Xmx256m"

# Data nodes hold the shards that contain the documents you have indexed. Data
# nodes handle data related operations like CRUD, search, and aggregations. 
# These operations are I/O-, memory-, and CPU-intensive. It is important to 
# monitor these resources and to add more data nodes if they are overloaded.
#
# The main benefit of having dedicated data nodes is the separation of the 
# master and data roles.
data:
  # This count will depend on your data and computation needs.
  replicas: 2

  persistentVolume:
    ## If true, data will create/use a Persistent Volume Claim
    ## If false, use emptyDir
    ##
    enabled: false

    ## data Persistent Volume access modes
    ## Must match those of existing PV or dynamic provisioner
    ## Ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
    ##
    accessModes:
      - ReadWriteOnce

    ## data Persistent Volume Claim annotations
    ##
    annotations: {}


    ## data Persistent Volume size
    ##
    size: 50Gi

    ## data Persistent Volume Storage Class
    ## If defined, volume.beta.kubernetes.io/storage-class: <storageClass>
    ## Default: volume.alpha.kubernetes.io/storage-class: default
    ##
    storageClass: ""

  env:
    NODE_DATA: "true"
    NODE_MASTER: "false"
    NODE_INGEST: "false"
    HTTP_ENABLE: "false"
    ES_JAVA_OPTS: "-Xms256m -Xmx256m"

# The master node is responsible for lightweight cluster-wide actions such as
# creating or deleting an index, tracking which nodes are part of the 
# cluster, and deciding which shards to allocate to which nodes. It is 
# important for cluster health to have a stable master node.
master:
  # Master replica count should be (#clients / 2) + 1, and generally at least 3.
  replicas: 3

  persistentVolume:
    ## If true, master will create/use a Persistent Volume Claim
    ## If false, use emptyDir
    ##
    enabled: false

    ## master data Persistent Volume access modes
    ## Must match those of existing PV or dynamic provisioner
    ## Ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
    ##
    accessModes:
      - ReadWriteOnce

    ## master data Persistent Volume Claim annotations
    ##
    annotations: {}


    ## master data Persistent Volume size
    ##
    size: 50Gi

    ## master data Persistent Volume Storage Class
    ## If defined, volume.beta.kubernetes.io/storage-class: <storageClass>
    ## Default: volume.alpha.kubernetes.io/storage-class: default
    ##
    storageClass: ""

  env:
    NODE_DATA: "false"
    NODE_MASTER: "true"
    NODE_INGEST: "false"
    HTTP_ENABLE: "false"
    ES_JAVA_OPTS: "-Xms256m -Xmx256m"

    # The default value for this environment variable is 2, meaning a cluster
    # will need a minimum of 2 master nodes to operate. If you have 3 masters
    # and one dies, the cluster still works.
    NUMBER_OF_MASTERS: "2"

service:
  type: ClusterIP
  httpPort: 9200
  transportPort: 9300
